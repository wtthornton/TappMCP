{
  "permissions": {
    "allow": [
      "Bash(npm run:*)",
      "Bash(cat:*)",
      "Bash(npx vitest run:*)",
      "Bash(npm test)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(git commit:*)",
      "Bash(npx tsc:*)",
      "Bash(npm test:*)",
      "Read(//c/Users/tappt/.cursor/**)",
      "Bash(npx @modelcontextprotocol/server-filesystem@latest:*)",
      "Bash(curl:*)",
      "Bash(npm install:*)",
      "Bash(npm config:*)",
      "Bash(npx @testsprite/testsprite-mcp@latest:*)",
      "Bash(pip install:*)",
      "Bash(python -m pre_commit run:*)",
      "Bash(node:*)",
      "Bash(docker:*)",
      "Bash(npm audit:*)",
      "Bash(git checkout:*)",
      "Bash(git rm:*)",
      "Bash(timeout 30 npx vitest run:*)",
      "Bash(pre-commit:*)",
      "Bash(python:*)",
      "Read(//c/Users/tappt/.cache/pre-commit/**)",
      "Bash(time npm run test -- src/tools/smart-write-mcp.test.ts --reporter=minimal)",
      "Bash(time npx vitest run src/tools/smart-write-mcp.test.ts --reporter=basic)",
      "Bash(git reset:*)",
      "Bash(time npx vitest run src/core/prompt-optimization --reporter=basic)",
      "Bash(time npx vitest run src/core/prompt-optimization/ContextAwareTemplateEngine.test.ts --reporter=minimal)",
      "Bash(time npx vitest run src/core/prompt-optimization/ContextAwareTemplateEngine.test.ts)",
      "Bash(time npx vitest run src/context/enhanced-integration/DeepContext7Broker.test.ts)",
      "Bash(time npx vitest run src/optimization/ToolChainOptimizer.test.ts)",
      "Bash(chmod:*)",
      "Bash(./scripts/deploy-production.sh:*)",
      "Bash(where npx)",
      "Bash(npx.cmd @modelcontextprotocol/server-filesystem@latest:*)",
      "Bash(time npx vitest run src/tools/smart-finish.test.ts --reporter=minimal)",
      "Bash(time npx vitest run src/tools/smart-finish.test.ts --reporter=basic)",
      "Bash(time npx vitest run:*)",
      "Bash(find:*)",
      "Bash(timeout 5s npx @modelcontextprotocol/server-github@latest)",
      "Bash(timeout 5s npx @testsprite/testsprite-mcp@latest)",
      "Bash(timeout 5s npx @playwright/mcp@latest)",
      "Bash(timeout 5s npm start)",
      "Bash(NODE_ENV=test npx vitest run src/server.test.ts --reporter=verbose)",
      "Bash(NODE_ENV=test npx vitest run src/server-basic.test.ts)",
      "Bash(NODE_ENV=test npx vitest run src/server-basic.test.ts --reporter=verbose)",
      "Bash(set NODE_ENV=test)",
      "Bash(NODE_ENV=test npx vitest run src/performance.test.ts)",
      "Bash(NODE_ENV=test npx vitest run src/final-integration.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test npx vitest run src/final-integration.test.ts --reporter=default --reporter-options=\"{\"\"summary\"\": false}\")",
      "Bash(NODE_ENV=test npx vitest run src/final-integration.test.ts)",
      "Bash(NODE_ENV=test npx vitest run src/final-integration.test.ts --reporter=verbose)",
      "Bash(NODE_ENV=test npx vitest run src/tools/smart-orchestrate.test.ts)",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/tools/smart-orchestrate.test.ts --reporter=basic)",
      "Bash(timeout 60s npm run qa:tests)",
      "Bash(timeout 30s npm run test -- src/optimization/ToolChainOptimizer.test.ts --reporter=verbose)",
      "Bash(NODE_ENV=test npx vitest run --coverage --reporter=basic)",
      "Bash(tar:*)",
      "Read(//c/cursor/**)",
      "Bash(timeout 5s npx @modelcontextprotocol/server-filesystem@latest)",
      "Bash(NODE_ENV=test npx vitest run src/prompts/documentation-prompt.test.ts --reporter=verbose)",
      "Bash(git restore:*)",
      "Bash(timeout:*)",
      "Bash(npm start)",
      "Bash(npm ci:*)",
      "Bash(NODE_ENV=test npx vitest run src/utils/context7-enhancer.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test npx vitest run src/performance.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test timeout 60s npx vitest run src/performance.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test npx vitest run src/deployment/smoke-test.test.ts --reporter=verbose)",
      "Bash(netstat:*)",
      "Bash(taskkill:*)",
      "Bash(NODE_ENV=test timeout 60s npx vitest run --reporter=basic)",
      "Bash(NODE_ENV=test timeout 60s npx vitest run src/tools/smart-write.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/tools/smart-begin.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test npx vitest run src/core/context7-cache.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test npx vitest run src/core/context7-cache.test.ts --reporter=verbose)",
      "Bash(NODE_ENV=test npx vitest run src/core/context7-cache.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run --reporter=default --reporter-options=\"{\"\"summary\"\": false}\")",
      "Bash(cmd.exe:*)",
      "Bash(NODE_ENV=test npx vitest run src/tools/smart-begin.test.ts --reporter=verbose)",
      "Bash(NODE_ENV=test npx vitest run src/core/simple-analyzer.test.ts --reporter=verbose)",
      "Bash(NODE_ENV=test npx vitest run src/tools/smart-begin.test.ts src/tools/smart-write.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test npx vitest run src/tools/smart-write.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test npx vitest run src/core/code-validator.test.ts --reporter=verbose)",
      "Bash(NODE_ENV=test npx vitest run src/core/code-validator.test.ts --reporter=verbose -t \"should detect security vulnerabilities\")",
      "Bash(NODE_ENV=test npx vitest run src/core/code-validator.test.ts --reporter=verbose -t \"should detect code quality\")",
      "Bash(NODE_ENV=test npx vitest run src/core/code-validator.test.ts --reporter=verbose -t \"should handle validation failures\")",
      "Bash(NODE_ENV=test npx vitest run src/core/code-validator.test.ts --reporter=verbose -t \"should detect issues in quick validation\")",
      "Bash(NODE_ENV=test npx vitest run src/core/code-validator.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test npx vitest run src/workflows/simple-sdlc-workflow.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test npx vitest run src/workflows/simple-sdlc-workflow.test.ts --reporter=verbose -t \"should generate deployment config\")",
      "Bash(NODE_ENV=test npx vitest run src/tools/smart-finish.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test npx vitest run --reporter=default --reporter-options=\"{\"\"summary\"\": false}\" src/core/simple-analyzer.test.ts src/core/context7-project-analyzer.test.ts src/core/code-validator.test.ts)",
      "Bash(NODE_ENV=test npx vitest run src/core/simple-analyzer.test.ts src/core/context7-project-analyzer.test.ts src/core/code-validator.test.ts)",
      "Bash(NODE_ENV=test npx vitest run src/tools/smart-begin.test.ts src/tools/smart-write.test.ts)",
      "Bash(mv:*)",
      "Bash(/dev/null)",
      "Bash(NODE_ENV=test npx vitest run src/tools/smart-write.test.ts --reporter=basic -t \"should generate ROLE-BASED TEMPLATES\")",
      "Bash(NODE_ENV=test npx vitest run src/tools/smart-write.test.ts --reporter=basic -t \"should generate ROLE-BASED TEMPLATES\" --timeout=15000)",
      "Bash(NODE_ENV=test npx vitest run src/intelligence/UnifiedCodeIntelligenceEngine.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test npx vitest run src/intelligence/UnifiedCodeIntelligenceEngine.test.ts --reporter=default --reporter-options='{\"\"summary\"\": false}' --timeout=15000)",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/intelligence/UnifiedCodeIntelligenceEngine.test.ts)",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/intelligence/UnifiedCodeIntelligenceEngine.test.ts -t \"should have all required category engines registered\")",
      "Bash(NODE_ENV=test timeout 60s npm run test)",
      "Bash(NODE_ENV=test npx vitest run src/intelligence/UnifiedCodeIntelligenceEngine.test.ts --reporter=default --reporter-options='{\"\"summary\"\": false}')",
      "Bash(NODE_ENV=test npx vitest run src/intelligence/UnifiedCodeIntelligenceEngine.test.ts --reporter=verbose)",
      "Bash(NODE_ENV=test)",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/intelligence/UnifiedCodeIntelligenceEngine.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/intelligence/UnifiedCodeIntelligenceEngine.test.ts --reporter=basic -t \"should have all required category engines registered\")",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/intelligence/UnifiedCodeIntelligenceEngine.test.ts --reporter=basic -t \"should detect frontend technology correctly\")",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/intelligence/UnifiedCodeIntelligenceEngine.test.ts --reporter=default --reporter-options='{\"\"summary\"\": false}')",
      "Bash(cmd /c:*)",
      "Bash(NODE_ENV=test npx vitest run --reporter=verbose)",
      "Bash($env:NODE_ENV='test')",
      "Bash(NODE_ENV=test npx vitest run src/intelligence/QualityAssuranceEngine.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test npx vitest run src/intelligence/QualityAssuranceEngine.test.ts --reporter=default --reporter-options='{\"\"summary\"\": false}' -t \"should analyze high-quality TypeScript React component\")",
      "Bash(NODE_ENV=test npx vitest run src/intelligence/QualityAssuranceEngine.test.ts -t \"should analyze high-quality TypeScript React component\")",
      "Bash(NODE_ENV=test npx vitest run src/intelligence/QualityAssuranceEngine.test.ts -t \"should analyze low-quality code correctly\")",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/intelligence/QualityAssuranceEngine.test.ts --reporter=default --reporter-options='{\"\"summary\"\": false}')",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/intelligence/QualityAssuranceEngine.test.ts)",
      "Bash(NODE_ENV=test npx tsc --noEmit --strict src/intelligence/QualityAssuranceEngine.ts)",
      "Bash(NODE_ENV=test npx tsc --noEmit src/intelligence/QualityAssuranceEngine.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/intelligence/QualityAssuranceEngine.test.ts -t \"should analyze high-quality TypeScript React component\")",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/intelligence/QualityAssuranceEngine.test.ts -t \"should analyze low-quality code correctly\")",
      "Bash(NODE_ENV=test npx vitest run)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/intelligence/QualityAssuranceEngine.test.ts -t \"should provide detailed quality metrics\")",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/intelligence/QualityAssuranceEngine.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/intelligence/QualityAssuranceEngine.test.ts -t \"should handle empty code\")",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/intelligence/QualityAssuranceEngine.test.ts -t \"should analyze mobile code with mobile-specific criteria\")",
      "Bash(NODE_ENV=test timeout 15s npx vitest run src/intelligence/QualityAssuranceEngine.test.ts)",
      "Bash(NODE_ENV=test npx vitest run src/intelligence/QualityAssuranceEngine.test.ts --reporter=basic -t \"should analyze low-quality code correctly\")",
      "Bash(NODE_ENV=test npx vitest run src/intelligence/QualityAssuranceEngine.test.ts --reporter=default --reporter-options='{\"\"summary\"\": false}' -t \"should analyze low-quality code correctly\")",
      "Bash(NODE_ENV=test npx vitest run src/intelligence/QualityAssuranceEngine.test.ts --reporter=verbose -t \"should analyze low-quality code correctly\")",
      "Bash(NODE_ENV=test npx vitest run src/intelligence/QualityAssuranceEngine.test.ts)",
      "Bash(NODE_ENV=test npx vitest run src/intelligence/PerformanceCache.test.ts)",
      "Bash(npx vitest list:*)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run --reporter=basic)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/tools/smart-write-mcp.test.ts --reporter=default --reporter-options='{\"\"summary\"\": false}')",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/tools/smart-write-mcp.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/tools/smart-write.test.ts)",
      "Bash(NODE_ENV=test timeout 15s npx vitest run src/tools/smart-write.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/tools/smart-begin.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/utils/context7-enhancer.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest list)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/core/business-analyzer.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/core/orchestration-engine.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/core/plan-generator.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/core/prompt-optimization/TokenBudgetManager.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/core/prompt-optimization/PromptOptimizer.test.ts)",
      "Bash(NODE_ENV=test timeout 30s npx vitest run --reporter=verbose)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/core/business-context-broker.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/core/prompt-optimization/ContextAwareTemplateEngine.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/resources/api-resource.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/resources/database-resource.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/prompts/code-generation-prompt.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/prompts/code-review-prompt.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/prompts/documentation-prompt.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/optimization/ToolChainOptimizer.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/core/code-validator.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/framework/framework-registry.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/framework/registry.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/framework/mcp-prompt.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/framework/resource-lifecycle-manager.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/workflows/simple-sdlc-workflow.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/patterns/CodeReusePatternEngine.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/core/security-scanner.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/core/quality-scorecard.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/utils/errors.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/server-basic.test.ts)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run src/vibe/VibeConfig.test.ts)",
      "Bash(NODE_ENV=test npx tsc --noEmit)",
      "Bash(sed:*)",
      "Bash(NODE_ENV=test timeout 10s npx vitest run --coverage --reporter=basic)",
      "Bash(NODE_ENV=test npx vitest run src/vibe/VibeCLI.test.ts --reporter=verbose)",
      "Bash(NODE_ENV=test npx vitest run src/vibe/VibeCLI.test.ts)",
      "Bash(NODE_ENV=test npx vitest run src/vibe/VibeCLI.test.ts -t \"should parse check\" --reporter=verbose)",
      "Bash(NODE_ENV=test npx vitest run src/deployment/smoke-test.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test npx vitest run src/deployment/smoke-test.test.ts -t \"should execute smart_finish\" --reporter=verbose)",
      "Bash(NODE_ENV=test npx vitest run src/integration/smart-vibe-integration.test.ts --reporter=verbose)",
      "Bash(NODE_ENV=test npx vitest run src/integration/smart-vibe-integration.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test timeout 30s npx vitest run --reporter=basic)",
      "Bash(npx eslint:*)",
      "Bash(NODE_ENV=test npx vitest run src/deployment/smoke-test.test.ts --reporter=default)",
      "Bash(NODE_ENV=test timeout 60s npx vitest run --reporter=default --reporter-options='{\"\"summary\"\": false}')",
      "Bash(NODE_ENV=test timeout 60s npx vitest run --reporter=default)",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/intelligence/engines/CategoryEngines.integration.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/intelligence/engines/CategoryEngines.integration.test.ts -t \"should analyze Node.js API code correctly\" --reporter=default --reporter-options='{\\\"\"summary\\\"\": false}')",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/intelligence/engines/CategoryEngines.integration.test.ts -t \"should analyze Node.js API code correctly\")",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/intelligence/engines/CategoryEngines.integration.test.ts)",
      "Bash(NODE_ENV=test timeout 30s npx vitest run src/tools/smart-write.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test timeout 60s npx vitest run src/tools/smart-write.test.ts)",
      "Bash(NODE_ENV=test timeout 60s npx vitest run --reporter=default --reporter-options='{\"\"\"\"summary\"\"\"\": false}')",
      "Bash(NODE_ENV=test timeout 15s npx vitest run src/vibe/VibeCLI.test.ts --reporter=verbose)",
      "Bash(NODE_ENV=test timeout 15s npx vitest run src/vibe/VibeCLI.test.ts --reporter=basic)",
      "Bash(NODE_ENV=test timeout 15s npx vitest run src/vibe/VibeCLI.test.ts --reporter=default --reporter-options='{\"\"summary\"\": false}')",
      "Bash(NODE_ENV=test timeout 15s npx vitest run src/vibe/VibeCLI.test.ts --reporter=default)",
      "Bash(NODE_ENV=test timeout 60s npx vitest run --reporter=default --exclude=\"**/VibeCLI.test.ts\")",
      "Bash(NODE_ENV=test timeout 15s npx vitest run --coverage --reporter=default --exclude=\"**/VibeCLI.test.ts\")",
      "Bash(git pull:*)"
    ],
    "deny": [],
    "ask": []
  }
}