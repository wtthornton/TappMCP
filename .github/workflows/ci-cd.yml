name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '20'
  DOCKER_IMAGE: smart-mcp
  DOCKER_TAG: latest

jobs:
  # Quality Assurance Job
  qa:
    name: Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint:check
      
    - name: Run TypeScript check
      run: npm run type-check
      
    - name: Run Prettier check
      run: npm run format:check
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: true

  # Security Scanning Job
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run OSV Scanner
      uses: google/osv-scanner-action@v1
      with:
        scan-args: '--format=json --output=osv-results.json'
        
    - name: Upload OSV results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: osv-results
        path: osv-results.json

  # Build and Test Docker Image
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [qa, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 3000:3000 ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        docker stop test-container

  # Deploy to Production (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        # Add your production deployment commands here
        # This could be deploying to your own server or local infrastructure
        echo "âœ… Production deployment complete!"
