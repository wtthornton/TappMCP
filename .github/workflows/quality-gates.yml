name: Quality Gates

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC

env:
  NODE_VERSION: '20'
  QUALITY_THRESHOLD: 90
  COVERAGE_THRESHOLD: 85
  SECURITY_THRESHOLD: 95

jobs:
  # Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run comprehensive quality gate check
      run: npm run quality-gate:ci

    - name: Run security scan
      run: npm run security:scan

    - name: Run performance monitoring
      run: npm run performance:monitor

    - name: Run documentation check
      run: npm run docs:check

    - name: Generate quality dashboard
      run: npm run quality-dashboard

    - name: Upload code quality report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-report
        path: eslint-report.json

  # Test Coverage Analysis
  test-coverage:
    name: Test Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Run tests with coverage
      run: npm run test:coverage
      env:
        CI: true

    - name: Check coverage thresholds
      run: |
        echo "Checking coverage thresholds..."
        if [ -f coverage/coverage-summary.json ]; then
          echo "Coverage report found"
          cat coverage/coverage-summary.json
        else
          echo "No coverage report found"
          exit 1
        fi

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            const lines = total.lines.pct;
            const functions = total.functions.pct;
            const branches = total.branches.pct;
            const statements = total.statements.pct;

            const comment = `## 📊 Test Coverage Report

            | Metric | Coverage | Threshold | Status |
            |--------|----------|-----------|--------|
            | Lines | ${lines}% | ${process.env.COVERAGE_THRESHOLD}% | ${lines >= process.env.COVERAGE_THRESHOLD ? '✅' : '❌'} |
            | Functions | ${functions}% | ${process.env.COVERAGE_THRESHOLD}% | ${functions >= process.env.COVERAGE_THRESHOLD ? '✅' : '❌'} |
            | Branches | ${branches}% | ${process.env.COVERAGE_THRESHOLD}% | ${branches >= process.env.COVERAGE_THRESHOLD ? '✅' : '❌'} |
            | Statements | ${statements}% | ${process.env.COVERAGE_THRESHOLD}% | ${statements >= process.env.COVERAGE_THRESHOLD ? '✅' : '❌'} |

            **Overall Quality Score**: ${Math.round((lines + functions + branches + statements) / 4)}%
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not generate coverage comment:', error);
          }

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run OSV Scanner
      uses: google/osv-scanner-action@v1
      with:
        scan-args: '--format=json --output=osv-results.json'

    - name: Run Semgrep security scan
      run: |
        npx semgrep --config=auto --config=p/owasp-top-ten . --json --output=semgrep-results.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          osv-results.json
          semgrep-results.json

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Start application
      run: |
        npm start &
        sleep 10
        echo "Application started"

    - name: Run performance tests
      run: |
        # Basic health check
        curl -f http://localhost:8080/health || exit 1

        # Performance metrics
        echo "Running performance tests..."
        # Add your performance test commands here

    - name: Stop application
      run: |
        pkill -f "node dist/server.js" || true

  # Quality Gate Decision
  quality-gate:
    name: Quality Gate Decision
    runs-on: ubuntu-latest
    needs: [code-quality, test-coverage, security-scan, performance-test]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Quality Gate Analysis
      run: |
        echo "## 🎯 Quality Gate Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Check code quality
        if [ "${{ needs.code-quality.result }}" == "success" ]; then
          echo "✅ Code Quality: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code Quality: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        # Check test coverage
        if [ "${{ needs.test-coverage.result }}" == "success" ]; then
          echo "✅ Test Coverage: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Test Coverage: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        # Check security
        if [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ Security Scan: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security Scan: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        # Check performance
        if [ "${{ needs.performance-test.result }}" == "success" ]; then
          echo "✅ Performance Test: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Performance Test: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY

        # Overall decision
        if [ "${{ needs.code-quality.result }}" == "success" ] &&
           [ "${{ needs.test-coverage.result }}" == "success" ] &&
           [ "${{ needs.security-scan.result }}" == "success" ] &&
           [ "${{ needs.performance-test.result }}" == "success" ]; then
          echo "🎉 **OVERALL QUALITY GATE: PASSED**" >> $GITHUB_STEP_SUMMARY
          echo "✅ All quality checks passed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "🚫 **OVERALL QUALITY GATE: FAILED**" >> $GITHUB_STEP_SUMMARY
          echo "❌ One or more quality checks failed. Please review and fix issues." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Set quality gate status
      run: |
        if [ "${{ needs.code-quality.result }}" == "success" ] &&
           [ "${{ needs.test-coverage.result }}" == "success" ] &&
           [ "${{ needs.security-scan.result }}" == "success" ] &&
           [ "${{ needs.performance-test.result }}" == "success" ]; then
          echo "QUALITY_GATE_STATUS=passed" >> $GITHUB_ENV
        else
          echo "QUALITY_GATE_STATUS=failed" >> $GITHUB_ENV
        fi
