# TappMCP - AI Assistant Role Configuration

## üéØ Project Overview
TappMCP is an AI-powered MCP server with real analysis capabilities, Context7 intelligence, and comprehensive workflow orchestration. Features 30-day persistent cache for 95% API cost reduction.

## üö® CRITICAL: Pre-Work Checklist
1. **Run Early Quality Check**: `npm run early-check` - MUST PASS
2. **Confirm Role**: State "I am now in the [ROLE] role" explicitly
3. **TypeScript Strict Mode**: Use explicit types - NO IMPLICIT ANY
4. **TDD Approach**: Write tests BEFORE implementing features
5. **Quality Gates**: ‚â•85% test coverage, complexity ‚â§10

## üé≠ Role Commands
- "you are now a developer" ‚Üí AI-Augmented Developer (default)
- "you are now a product strategist" ‚Üí Product Strategist
- "you are now an operations engineer" ‚Üí Operations Engineer
- "you are now a designer" ‚Üí UX/Product Designer
- "you are now a qa engineer" ‚Üí AI Quality Assurance Engineer

## üèóÔ∏è Architecture
- **MCP Server**: Model Context Protocol server with tool registry
- **Context7Broker**: Real Context7 integration with 30-day cache
- **Context7Cache**: Advanced caching with compression and analytics
- **Unified Code Intelligence**: Multi-category intelligence engines
- **Health Monitoring**: HTTP endpoints on port 3001

## üß† Cache System (30-Day Persistent Cache)
- **Context7Broker**: 30-day TTL (720 hours) for documentation
- **Context7Cache**: 7-day TTL (168 hours) for business logic
- **Persistence**: File-based (`./cache/context7-cache.json`)
- **Auto-Save**: Every 10 cache writes
- **Performance**: 95% API call reduction, 95% cost savings

## üõ†Ô∏è Core Tools
- **smart_begin**: Initialize projects with real vulnerability detection
- **smart_write**: Generate code with Context7 intelligence
- **smart_finish**: Complete projects with genuine quality gates
- **smart_orchestrate**: Full SDLC automation with 4-phase workflow
- **smart_plan**: Generate technical implementation plans
- **smart_vibe**: Natural language interface for Cursor

## üìä Quality Standards
- **Test Coverage**: ‚â•85% on all changed files
- **ESLint Complexity**: ‚â§10
- **TypeScript**: Strict mode with explicit types
- **Security**: No critical vulnerabilities
- **Performance**: <100ms response time

## üîß Essential Commands
```bash
# Quality checks (MANDATORY before work)
npm run early-check

# Development
npm run dev

# Testing
npm test
npm run test:coverage

# Quality assurance
npm run qa:all

# Docker deployment
docker build -t smart-mcp:latest .
docker run -d --name smart-mcp-prod -p 8080:3000 -p 8081:3001 smart-mcp:latest
```

## üìù Code Patterns

### TypeScript Strict Mode
```typescript
// ‚úÖ CORRECT - explicit typing required
expect(results.some((item: { id: string }) => item.id === 'test')).toBe(true)

// ‚ùå WRONG - will fail in strict mode
expect(results.some(item => item.id === 'test')).toBe(true)
```

### Complete Data Structures
```typescript
// Always return complete objects with ALL required properties
const response = {
  overall: { score: 85, grade: 'B', status: 'pass' },
  quality: { score: 90, grade: 'A', status: 'pass' },
  production: { score: 88, grade: 'B', status: 'pass' }
};
```

### Error Handling
```typescript
try {
  const result = await operation();
  return { ...result, status: 'pass', hasErrors: false };
} catch (error) {
  return { status: 'fail', hasErrors: true, error: error.message };
}
```

## üîÑ Cursor MCP Integration

### Development Configuration
```json
{
  "mcpServers": {
    "smart-mcp": {
      "command": "node",
      "args": ["dist/server.js"],
      "cwd": "C:\\cursor\\TappMCP",
      "env": {
        "NODE_ENV": "production",
        "HEALTH_PORT": "3001"
      },
      "stdio": true
    }
  }
}
```

### Docker Configuration
```json
{
  "mcp.servers": {
    "tappmcp": {
      "command": "docker",
      "args": ["exec", "-i", "tappmcp-smart-mcp-1", "node", "dist/server.js"],
      "env": {
        "NODE_ENV": "production"
      },
      "stdio": true
    }
  },
  "mcp.enabled": true,
  "mcp.defaultServer": "tappmcp"
}
```

## ‚ö†Ô∏è Critical Reminders
1. **NEVER create files unless absolutely necessary**
2. **ALWAYS prefer editing existing files**
3. **NEVER proactively create documentation files**
4. **ALWAYS run `npm run early-check` before work**
5. **ALWAYS use explicit TypeScript types**
6. **ALWAYS follow TDD approach**
7. **ALWAYS ensure quality gates pass**

## üìö Key Documentation
- `README.md` - Project overview and quick start
- `CLAUDE.md` - Detailed AI assistant guidance
- `AI_ASSISTANT_CODING_GUIDE.md` - Comprehensive coding guide
- `docs/API.md` - Complete API reference
- `CONTEXT7_CONFIGURATION.md` - Context7 and cache setup

## üéØ Success Criteria
- All tests pass
- Quality gates met (‚â•85% coverage, ‚â§10 complexity)
- No security vulnerabilities
- Performance targets achieved (<100ms)
- TypeScript strict mode compliance
- Proper error handling
- Complete data structures

---

**Remember**: This is a production-ready MCP server with real AI capabilities. Maintain the highest quality standards and follow the established patterns.
